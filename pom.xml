<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>no.liflig</groupId>
    <artifactId>kotlin-parent</artifactId>
    <version>3.20240828.064823</version>
  </parent>

  <groupId>no.liflig</groupId>
  <artifactId>user-roles</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>user-roles</name>

  <properties>
    <major-version>0</major-version>
    <timestamp>${maven.build.timestamp}</timestamp>
    <maven.build.timestamp.format>yyyy-MM-dd'T'HH:mm:ss'Z'</maven.build.timestamp.format>

    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

    <java.version>11</java.version>
    <kotlin.version>2.0.20</kotlin.version>
    <junit.version>5.11.0</junit.version>
    <http4k.version>5.30.0.0</http4k.version>
    <arrow.version>1.2.4</arrow.version>
    <awssdk.version>2.27.16</awssdk.version>
    <slf4j.version>2.0.16</slf4j.version>
    <kotlin-logging-jvm.version>3.0.5</kotlin-logging-jvm.version>
    <logback-classic.version>1.5.8</logback-classic.version>
    <logstash-logback-encoder.version>8.0</logstash-logback-encoder.version>
    <testcontainers.postgresql.version>1.20.1</testcontainers.postgresql.version>
    <hikariCP.version>5.1.0</hikariCP.version>
    <flyway.version>10.18.0</flyway.version>
    <postgresql.version>42.7.4</postgresql.version>
    <jdbi3-core.version>3.45.4</jdbi3-core.version>
    <kotlinx-serialization.version>1.7.2</kotlinx-serialization.version>
    <jackson.version>2.17.2</jackson.version>
    <commons-codec.version>1.17.1</commons-codec.version>
    <httpcore.version>4.4.16</httpcore.version>

    <!-- Liflig -->
    <liflig.properties.version>2.20240910.021315</liflig.properties.version>
    <liflig-document-store.version>2.20240916.141624</liflig-document-store.version>
    <liflig-logging-http4k.version>1.20240718.154356</liflig-logging-http4k.version>
    <liflig-snapshot-test.version>1.20240905.231604</liflig-snapshot-test.version>
    <liflig-http4k.version>1.20240914.143706</liflig-http4k.version>

    <!--testing-->
    <jacoco-maven-plugin.version>0.8.12</jacoco-maven-plugin.version>
    <maven-failsafe-plugin.version>3.5.0</maven-failsafe-plugin.version>
    <assertj-core.version>3.26.3</assertj-core.version>

    <!-- Sonarcloud -->
    <sonar-maven-plugin.version>3.11.0.3922</sonar-maven-plugin.version>
    <sonar.projectName>user-roles</sonar.projectName>
    <sonar.host.url>https://sonarcloud.io</sonar.host.url>
    <sonar.organization>capralifecycle</sonar.organization>
    <sonar.projectKey>capralifecycle_user-roles</sonar.projectKey>
  </properties>

  <scm>
    <developerConnection>scm:git:https://github.com/capralifecycle/user-roles.git
    </developerConnection>
    <connection>scm:git:https://github.com/capralifecycle/user-roles.git</connection>
    <url>https://github.com/capralifecycle/user-roles</url>
    <tag>HEAD</tag>
  </scm>

  <profiles>
    <profile>
      <id>gh-actions-build</id>
      <properties>
        <!--suppress UnresolvedMavenProperty -->
        <build.commit>${env.GIT_COMMIT_ID}</build.commit>
        <!--suppress UnresolvedMavenProperty -->
        <build.branch>${env.BRANCH_NAME}</build.branch>
        <build.timestamp>${timestamp}</build.timestamp>
      </properties>
    </profile>
  </profiles>

  <repositories>
    <repository>
      <id>github</id>
      <url>https://maven.pkg.github.com/capralifecycle/*</url>
    </repository>
  </repositories>

  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>org.http4k</groupId>
        <artifactId>http4k-bom</artifactId>
        <version>${http4k.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
      <dependency>
        <groupId>software.amazon.awssdk</groupId>
        <artifactId>bom</artifactId>
        <version>${awssdk.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
      <dependency>
        <groupId>org.jetbrains.kotlinx</groupId>
        <artifactId>kotlinx-serialization-bom</artifactId>
        <version>${kotlinx-serialization.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
      <dependency>
        <groupId>org.jetbrains.kotlinx</groupId>
        <artifactId>kotlinx-serialization-json</artifactId>
        <version>${kotlinx-serialization.version}</version>
      </dependency>
      <dependency>
        <groupId>org.slf4j</groupId>
        <artifactId>slf4j-bom</artifactId>
        <version>${slf4j.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
      <dependency>
        <groupId>com.fasterxml.jackson</groupId>
        <artifactId>jackson-bom</artifactId>
        <version>${jackson.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
      <dependency>
        <groupId>org.junit</groupId>
        <artifactId>junit-bom</artifactId>
        <version>${junit.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
      <dependency>
        <groupId>commons-codec</groupId>
        <artifactId>commons-codec</artifactId>
        <version>${commons-codec.version}</version>
      </dependency>
      <dependency>
        <groupId>org.apache.httpcomponents</groupId>
        <artifactId>httpcore</artifactId>
        <version>${httpcore.version}</version>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <dependencies>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
    </dependency>
    <dependency>
      <groupId>io.github.microutils</groupId>
      <artifactId>kotlin-logging-jvm</artifactId>
      <version>${kotlin-logging-jvm.version}</version>
    </dependency>
    <dependency>
      <groupId>org.http4k</groupId>
      <artifactId>http4k-core</artifactId>
    </dependency>
    <dependency>
      <groupId>org.jetbrains.kotlinx</groupId>
      <artifactId>kotlinx-serialization-json</artifactId>
    </dependency>

    <!-- For serialization in OpenAPI Swagger docs -->
    <dependency>
      <groupId>org.http4k</groupId>
      <artifactId>http4k-format-jackson</artifactId>
    </dependency>
    <dependency>
      <groupId>org.http4k</groupId>
      <artifactId>http4k-format-kotlinx-serialization</artifactId>
    </dependency>
    <dependency>
      <groupId>org.http4k</groupId>
      <artifactId>http4k-server-jetty</artifactId>
    </dependency>
    <dependency>
      <groupId>org.jetbrains.kotlin</groupId>
      <artifactId>kotlin-stdlib-jdk8</artifactId>
    </dependency>
    <dependency>
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-classic</artifactId>
      <version>${logback-classic.version}</version>
    </dependency>
    <dependency>
      <groupId>net.logstash.logback</groupId>
      <artifactId>logstash-logback-encoder</artifactId>
      <version>${logstash-logback-encoder.version}</version>
    </dependency>
    <dependency>
      <groupId>io.arrow-kt</groupId>
      <artifactId>arrow-core-jvm</artifactId>
      <version>${arrow.version}</version>
    </dependency>

    <!-- For database configuration -->
    <dependency>
      <groupId>com.zaxxer</groupId>
      <artifactId>HikariCP</artifactId>
      <version>${hikariCP.version}</version>
    </dependency>
    <dependency>
      <groupId>org.flywaydb</groupId>
      <artifactId>flyway-core</artifactId>
      <version>${flyway.version}</version>
    </dependency>
    <dependency>
      <groupId>org.flywaydb</groupId>
      <artifactId>flyway-database-postgresql</artifactId>
      <version>${flyway.version}</version>
    </dependency>
    <dependency>
      <groupId>org.postgresql</groupId>
      <artifactId>postgresql</artifactId>
      <version>${postgresql.version}</version>
    </dependency>
    <dependency>
      <groupId>org.jdbi</groupId>
      <artifactId>jdbi3-core</artifactId>
      <version>${jdbi3-core.version}</version>
    </dependency>

    <!-- For OpenAPI Swagger docs -->
    <dependency>
      <groupId>org.jetbrains.kotlin</groupId>
      <artifactId>kotlin-reflect</artifactId>
      <scope>compile</scope>
    </dependency>

    <!-- Liflig -->
    <dependency>
      <groupId>no.liflig</groupId>
      <artifactId>properties</artifactId>
      <version>${liflig.properties.version}</version>
    </dependency>
    <dependency>
      <groupId>no.liflig</groupId>
      <artifactId>liflig-document-store</artifactId>
      <version>${liflig-document-store.version}</version>
    </dependency>
    <dependency>
      <groupId>no.liflig</groupId>
      <artifactId>snapshot-test</artifactId>
      <version>${liflig-snapshot-test.version}</version>
    </dependency>
    <dependency>
      <groupId>no.liflig</groupId>
      <artifactId>liflig-http4k-setup</artifactId>
      <version>${liflig-http4k.version}</version>
    </dependency>

    <!--test-->
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-engine</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <!-- For @Parameterized tests -->
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-params</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <!-- For Assertions.assertThat() -->
      <groupId>org.assertj</groupId>
      <artifactId>assertj-core</artifactId>
      <version>${assertj-core.version}</version>
      <scope>test</scope>
    </dependency>
    <!--needed to be able to use FlowTestExtension in tests for autowiring-->
    <dependency>
      <groupId>org.awaitility</groupId>
      <artifactId>awaitility-kotlin</artifactId>
      <version>4.2.2</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-api</artifactId>
      <version>${junit.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.testcontainers</groupId>
      <artifactId>postgresql</artifactId>
      <version>${testcontainers.postgresql.version}</version>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <sourceDirectory>src/main/kotlin</sourceDirectory>
    <testSourceDirectory>src/test/kotlin</testSourceDirectory>
    <resources>
      <resource>
        <directory>src/main/resources</directory>
        <filtering>false</filtering>
      </resource>
      <resource>
        <directory>src/main/resources-filtered</directory>
        <filtering>true</filtering>
      </resource>
    </resources>
    <plugins>
      <!-- Plugin for enforcing proper dependency management -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-enforcer-plugin</artifactId>
        <version>3.5.0</version>
        <executions>
          <execution>
            <id>enforce</id>
            <configuration>
              <rules>
                <banDuplicatePomDependencyVersions/>
                <dependencyConvergence/>
                <requireUpperBoundDeps/>
                <banDynamicVersions>
                  <allowSnapshots>true</allowSnapshots>
                </banDynamicVersions>
              </rules>
            </configuration>
            <goals>
              <goal>enforce</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <!-- Used for integration tests -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-failsafe-plugin</artifactId>
        <version>${maven-failsafe-plugin.version}</version>
      </plugin>
      <!--  Trigger SonarQube analysis on Maven projects -->
      <plugin>
        <groupId>org.sonarsource.scanner.maven</groupId>
        <artifactId>sonar-maven-plugin</artifactId>
        <version>${sonar-maven-plugin.version}</version>
      </plugin>
      <!-- Generate test coverage reports. Can be used by sonarcloud.io -->
      <plugin>
        <groupId>org.jacoco</groupId>
        <artifactId>jacoco-maven-plugin</artifactId>
        <version>${jacoco-maven-plugin.version}</version>
        <executions>
          <execution>
            <id>jacoco-initialize</id>
            <goals>
              <goal>prepare-agent</goal>
            </goals>
            <configuration>
            </configuration>
          </execution>
          <execution>
            <id>jacoco-site</id>
            <phase>package</phase>
            <goals>
              <goal>report</goal>
            </goals>
            <configuration>
              <formats>
                <format>XML</format>
              </formats>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <!-- Plugin for creating self-contained jar file (fat-jar / uber-jar) -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-shade-plugin</artifactId>
        <executions>
          <execution>
            <phase>package</phase>
            <goals>
              <goal>shade</goal>
            </goals>
            <configuration>
              <!-- Always use the file target/app.jar, whatever version/name we have. -->
              <finalName>app</finalName>
              <createDependencyReducedPom>false</createDependencyReducedPom>
              <filters>
                <filter>
                  <artifact>*:*</artifact>
                  <excludes>
                    <exclude>*module-info.class</exclude>
                    <exclude>META-INF/*.SF</exclude>
                    <exclude>META-INF/*.DSA</exclude>
                    <exclude>META-INF/*.RSA</exclude>
                    <exclude>META-INF/LICENSE.txt</exclude>
                    <exclude>META-INF/LICENSE</exclude>
                    <exclude>META-INF/MANIFEST.MF</exclude>
                    <exclude>META-INF/NOTICE</exclude>
                    <exclude>META-INF/NOTICE.txt</exclude>
                    <exclude>META-INF/io.netty.versions.properties</exclude>
                    <exclude>META-INF/kotlinx_coroutines_core.version</exclude>
                    <exlude>META-INF/maven/com.fasterxml.jackson.core/jackson-core/pom.properties</exlude>
                    <exclude>META-INF/maven/com.fasterxml.jackson.core/jackson-core/pom.xml</exclude>
                    <exclude>META-INF/kotlinx-serialization-json.kotlin_module</exclude>
                    <exclude>META-INF/DEPENDENCIES</exclude>
                  </excludes>
                </filter>
              </filters>
              <transformers>
                <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                  <manifestEntries>
                    <Main-Class>no.liflig.userroles.MainKt</Main-Class>
                  </manifestEntries>
                </transformer>
                <transformer implementation="org.apache.maven.plugins.shade.resource.ServicesResourceTransformer"/>
              </transformers>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <!-- Compiles Kotlin sources and modules -->
      <plugin>
        <groupId>org.jetbrains.kotlin</groupId>
        <artifactId>kotlin-maven-plugin</artifactId>
        <executions>
          <execution>
            <id>compile</id>
            <phase>compile</phase>
            <goals>
              <goal>compile</goal>
            </goals>
            <configuration>
              <sourceDirs>
                <sourceDir>${project.basedir}/src/main/kotlin</sourceDir>
              </sourceDirs>
            </configuration>
          </execution>
          <execution>
            <id>test-compile</id>
            <goals>
              <goal>test-compile</goal>
            </goals>
            <configuration>
              <sourceDirs>
                <sourceDir>${project.basedir}/src/test/kotlin</sourceDir>
              </sourceDirs>
            </configuration>
          </execution>
        </executions>
        <configuration>
          <jvmTarget>${java.version}</jvmTarget>
          <compilerPlugins>
            <plugin>kotlinx-serialization</plugin>
          </compilerPlugins>
          <args>
            <arg>-Xuse-experimental=kotlin.time.ExperimentalTime</arg>
          </args>
        </configuration>
        <dependencies>
          <dependency>
            <groupId>org.jetbrains.kotlin</groupId>
            <artifactId>kotlin-maven-serialization</artifactId>
            <version>${kotlin.version}</version>
          </dependency>
        </dependencies>
      </plugin>
    </plugins>
  </build>
</project>
